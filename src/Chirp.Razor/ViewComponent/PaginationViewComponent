using Microsoft.AspNetCore.Mvc;
using Chirp.Razor;
using System.Threading.Tasks;
namespace Chirp.Razor.ViewComponents
{
    // Overall ViewComponent code refactored from: https://www.learnrazorpages.com/razor-pages/view-components
    
    public class PagesData {
        int CurrentPage { get; set; } = 1;
        int TotalPages  { get; set; } = 1;
        bool LastPage { get; set; } = false;
    }

    public class PaginationViewComponent : ViewComponents
    {
        private ICheepService _cheepService;
        public PaginationViewComponent(ICheepService cheepService)
        {
            _service = cheepService;
        }

        public async Task<IViewComponentResult> InvokeAsync()
        {
            // How to use ViewData from: https://www.learnrazorpages.com/razor-pages/viewdata
            var page = ViewData["Page"];
            var author = ViewData["Author"];

            // from Mike Brind: https://www.mikesdotnetting.com/article/328/simple-paging-in-asp-net-core-razor-pages
            var count = (if (author == null) ? await _service.GetCount() : await _service.GetCount(author))
            int _count = count > 0 ? count : 1;
            PagesData.TotalPages = (int)Math.Ceiling((double)_count / _service.GetLimit());
            
            PagesData.CurrentPage = page;

            if (PagesData.CurrentPage == TotalPages)
            {
                PagesData.LastPage = true;
            }

            return View(PagesData);
        }
    }
}