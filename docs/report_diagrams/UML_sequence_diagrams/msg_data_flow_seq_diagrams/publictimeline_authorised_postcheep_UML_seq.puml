@startuml

header Sequence Diagram for Message- and Datataflow
Title Post cheep as an authorised user with no followings

actor "User" as Us
participant "Front End" as Fe
participant "API" as Api
participant "Data-handler" as Dh
database "Database" as Db

== After accessing public timeline as an authorised user ==
Us -> Fe: Presses "Share"
Fe -> Api: HTTP POST: <User's message>

Activate Api #LightBlue 
    Api ->> Dh: GetAuthorByName(<userName>)
    Activate Api
        Dh -> Db: Query author with name: <userName>
        Db -> Dh: Returns: [Author]
        Dh -->> Api: Returns: [Author]
    Deactivate Api

    alt If author does not exist
        Api ->> Dh: GetUserByName(<userName>)
        Activate Api
            Dh -> Db: Query user with name: <userName>
            Db -> Dh: Returns: [User]
            Dh -->> Api: Returns: [User]
        Deactivate Api

        alt If user does not exist
            Api ->> Dh: CreateUser(<userName>)
            Activate Api
                Dh -> Db: Add new user
            Deactivate Api
            Api ->> Dh: GetUserByName(<userName>)
            Activate Api
                Dh -> Db: Query user with name: <userName>
                Db -> Dh: Returns: [User]
                Dh -->> Api: Returns: [User]
            Deactivate Api
            alt If created user does not exist
                Api -> Api: throw new InvalidOperationException\nMessage: "Author could not be created."
            end
        end
        Api ->> Dh: CreateAuthor(User)
        Activate Api
            Dh -> Db: Add user as new author
            Api ->> Dh: GetAuthorByName(<userName>)
            Dh -> Db: Query author by <userName>
            Db --> Dh: Returns: [Author]
            Dh ->> Api: Returns: [Author]
        Deactivate Api
    end
    alt If author still does not exist
        Api -> Api: throw new InvalidOperationException\nMessage: "Author could not be created."
    end

    Api -> Api: CheepCreateDTO(<User's message>, <userName>)
    Api ->> Dh: CreateCheep(CheepDTO, <User's Author-data>)
    Activate Api
        Dh -> Db: Add new cheep
    Deactivate Api
Deactivate Api

Api -> Fe: HTTP Response:\nRedirect to {url}/<userName>
Fe -> Api: HTTP GET: {url}/<userName>

Api -> Dh: GetUserIDByName(<userName>)
Dh -> Db: Query user's id by <userName>
Return Returns: UserId
Dh --> Api: Returns: UserId

Api -> Dh: GetCheepsCountFromAuthorId(UserId)
Dh -> Db: Query author with UserId
Return Returns: Author
Dh -> Db: Query the author and their list of cheeps to count amount of cheeps
Return Returns: Count of author's cheeps
Dh --> Api: Returns: Count of author's cheeps
Api -> Dh: GetCheepsByAuthorId(UserId, 0, 32)
Dh -> Db: Query author's newest 32 cheeps by UserId
Return Returns: Up to 32 of the author's newest cheeps
Dh --> Api: Returns: Paginated list of cheeps sorted by date

Api -> Fe: HTTP Response:\n text/html with cheeps
Fe -> Us: Renders webpage
@enduml