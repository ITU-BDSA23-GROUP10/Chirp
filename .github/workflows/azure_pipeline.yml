name: Azure Pipeline

on:
  push:
    branches:
      - yaml-azure-connection-string
      
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      # how to implement the secrets in github:
      # https://youtu.be/tXv_npAP90k?si=EMC8pgYt5paIQTZN&t=122
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      WEB_APP_NAME: ${{ secrets.WEB_APP_NAME }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      # AZURE_DB_URL: ${{ secrets.AZURE_DB_URL }}
      # USER_NAME: ${{ secrets.USER_NAME }}
      # PASSWORD: ${{ secrets.PASSWORD }}
      # DB_NAME: ${{ secrets.DB_NAME }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Install EF Tools
      run: dotnet tool install --global dotnet-ef --version 7.0.13

    - name: install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # how to set up the yaml file with azure & github secrets: 
    # https://learn.microsoft.com/en-us/azure/azure-sql/database/connect-github-actions-sql-db?view=azuresql&tabs=userlevel
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create EF bundle
      run: dotnet ef migrations bundle --self-contained -r linux-x64 --project ./src/Chirp.Web

    - name: Apply EF migrations
      run: |
        # the --output tsv is just formatting (tab-seperated values), json is the default (might change this to json?)
        # the az command gets the password and other details directly from azure
      
        CONNECTION_STRING=$(az webapp config connection-string list --name $WEB_APP_NAME --resource-group $RESOURCE_GROUP --query "[0].value" --output tsv)
        # Rasmus used efbundle in his code
        # https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/applying?tabs=dotnet-core-cli#bundles
        chmod +x efbundle
        ./efbundle --connection "$CONNECTION_STRING"
        
    - name: Logout of Azure CLI
      run: az logout

  release:
    runs-on: ubuntu-latest
    steps:
    - name: Deploy Project
      shell: bash
      run: |
        #Building the entire world over here and zipping it up in tar and zip
        #--framework netcoreapp3.1

        tag=$(git describe --tags --abbrev=0)

        #Build for Windows
        windows_release_name="Chirp-$tag-win-x64"

        dotnet publish src/Chirp.Web/Chirp.Web.csproj --framework net7.0 --runtime "win-x64" --self-contained false -c Release -o "${windows_release_name}"
        7z a -tzip "${windows_release_name}.zip" "./${windows_release_name}/*"

        rm -r "$windows_release_name" # Delete output directory

        #Build for Linux
        linux_release_name="Chirp-$tag-linux-x64"

        dotnet publish src/Chirp.Web/Chirp.Web.csproj --framework net7.0 --runtime "linux-x64" --self-contained false -c Release -o "${linux_release_name}"
        7z a -tzip "${linux_release_name}.zip" "./${linux_release_name}/*"

        rm -r "$linux_release_name" # Delete output directory

        #Build for MacOS
        mac_release_name="Chirp-$tag-osx-x64"

        dotnet publish src/Chirp.Web/Chirp.Web.csproj --framework net7.0 --runtime "osx-x64" --self-contained false -c Release -o "${mac_release_name}"
        7z a -tzip "${mac_release_name}.zip" "./${mac_release_name}/*"

        rm -r "$mac_release_name" # Delete output directory
    - name: release project
      uses: softprops/action-gh-release@v1
      with: 
        files: "*.zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # AZURE CREDENTIALS
      # https://learn.microsoft.com/en-us/cli/azure/install-azure-cli
      # For the azure credentials value for github it should be formatted as json
      # check in terminal you have the azure client installed by writing az version
      # insert the following command (after youre logged in): az ad sp create-for-rbac
      # dont know if i have access? command to see which subscription IDs are available:
      # az account list --output table
      # az ad sp create-for-rbac --name "chirpgroup10database" --role contributor --scopes /subscriptions/7d28c7ae-3a30-445f-b5c5-17afb26b07f8/resourceGroups/bdsagroup10chirpremotedb_group --sdk-auth
      #comment